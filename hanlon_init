#!/usr/bin/env ruby
#
# Hanlon application initialization script
#
#

require 'pathname'
require 'colored'

$LOAD_PATH.unshift((Pathname(__FILE__).realpath.dirname + './rules').cleanpath.to_s)
$LOAD_PATH.unshift((Pathname(__FILE__).realpath.dirname + './util').cleanpath.to_s)
$app_root = Pathname(__FILE__).realpath.dirname.to_s
$hanlon_root = Pathname(__FILE__).realpath.dirname.to_s

require 'config/server'
require 'config/client'
require 'properties'

require 'helper/swagger'

#require "highline/system_extensions"  # gem install highline


module ProjectHanlon
  class Init

    def initialize
      nil
    end

    def run(*argv)
      puts
      puts "#{ProjectHanlon::Properties.app_name} (ver #{ProjectHanlon::Properties.app_build_version})".green
      puts ProjectHanlon::Properties.app_copy_right.yellow
      puts
      puts "Setting initial environment for #{ProjectHanlon::Properties.app_name}".blue
      puts

      validate_hanlon_struct
      create_hanlon_config_file

      puts
      puts "Setting up of #{ProjectHanlon::Properties.app_name} environment complete".blue

      return 0
    end

    def create_hanlon_config_file

      puts "Creating server configuration file...".cyan

      web_config_path = File.join($app_root, "web/config/hanlon_server.conf")
      server_config = ProjectHanlon::Config::Server.new

      case check_file server_config, web_config_path
        when -1
          puts "   existing server config file at #{web_config_path} left intact"
        when 0
          puts "   a new default server configuration file created at #{web_config_path}"
        when 1
          puts "   a new default server configuration created at #{web_config_path}"
          puts "   existing file backed up with timestamp"
      end

      puts

      puts "Creating client configuration file...".cyan

      cli_config_path = File.join($app_root, "cli/config/hanlon_client.conf")
      client_config = ProjectHanlon::Config::Client.new

      case check_file client_config, cli_config_path
        when -1
          puts "   existing client config file at #{cli_config_path} left intact"
        when 0
          puts "   a new default client configuration created at #{cli_config_path}"
        when 1
          puts "   a new default client configuration created at #{cli_config_path}"
          puts "   existing file backed up with timestamp"
      end

      puts
      puts "Please edit respective configuration files as needed before starting #{ProjectHanlon::Properties.app_name} server"

    end

    def check_file(obj, web_config_path)
      file_action = 0 # 0 -create new 1 - overwrite existing 2 - skip

      if File.exist? web_config_path then
        puts "   existing config file found at #{web_config_path}"


        begin
          printf "   Do you want to replace it? [y/N] "
          input = STDIN.gets.strip.upcase

          if input == ''
            input =  'N'
          end

          if ! %w(Y N).include? input
            puts "   sorry, invalid response!!!".red
          end

        end while ! %w(Y N).include? input

        if %w(Y).include? input then
          File.rename web_config_path, web_config_path + "_" + Time.now.strftime("%m%d%Y%I%M") + ".bak"
          file_action = 1
        else
          return file_action = -1
        end


      end

      obj.save_as_yaml(web_config_path)
      return file_action

    end

    def validate_hanlon_struct

      #ensure log directories
      FileUtils.mkdir_p("cli/log")
      FileUtils.mkdir_p("web/log")
      "#{ProjectHanlon::Properties.app_name} log files initialized"
    end

  end
end

exit ProjectHanlon::Init.new.run(*ARGV)